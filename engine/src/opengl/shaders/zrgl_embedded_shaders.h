#ifndef SHADERS_H
#define SHADERS_H
/* This file is automatically generated */
//////////////////////////////////////////////////
// batch_quad_test_frag.glsl
//////////////////////////////////////////////////
static const char* batch_quad_test_frag_text =
"#version 330\n"
"\n"
"uniform int u_instanceCount;\n"
"\n"
"// flat - no interpolation\n"
"flat in int m_instanceID;\n"
"\n"
"out vec4 outputColor;\n"
"\n"
"void main()\n"
"{\n"
"    float r = float(m_instanceID) / float(u_instanceCount);\n"
"    float g = 1.0 - float(m_instanceID) / float(u_instanceCount);\n"
"    outputColor = vec4(r, g, 1, 1);\n"
"}\n"
"\n"
;
//////////////////////////////////////////////////
// batch_quad_test_vert.glsl
//////////////////////////////////////////////////
static const char* batch_quad_test_vert_text =
"#version 330\n"
"\n"
"uniform mat4 u_projection;\n"
"uniform int u_instanceCount;\n"
"\n"
"layout (location = 0) in vec3 i_position;\n"
"layout (location = 1) in vec2 i_uv;\n"
"layout (location = 2) in vec3 i_normal;\n"
"\n"
"out vec2 m_texCoord;\n"
"out vec3 m_normal;\n"
"out vec3 m_fragPos;\n"
"// flat - no interpolation\n"
"flat out int m_instanceID;\n"
"\n"
"void main()\n"
"{\n"
"    // pass instance to frag shader\n"
"    m_instanceID = gl_InstanceID;\n"
"\n"
"    mat4 u_modelView = u_projection;\n"
"\n"
"    u_modelView[0][0] *= 0.5;\n"
"    u_modelView[1][1] *= 0.5;\n"
"    u_modelView[2][2] *= 0.5;\n"
"\n"
"    // setup a hard-coded position\n"
"    if (gl_InstanceID == 0)\n"
"    {\n"
"        u_modelView[3][0] = -0.5;\n"
"        u_modelView[3][1] = -0.5;\n"
"    }\n"
"    else if (gl_InstanceID == 1)\n"
"    {\n"
"        u_modelView[3][0] = 0.5;\n"
"        u_modelView[3][1] = -0.5;\n"
"    }\n"
"    else if (gl_InstanceID == 2)\n"
"    {\n"
"        u_modelView[3][0] = 0.5;\n"
"        u_modelView[3][1] = 0.5;\n"
"    }\n"
"    else if (gl_InstanceID == 3)\n"
"    {\n"
"        u_modelView[3][0] = -0.5;\n"
"        u_modelView[3][1] = 0.5;\n"
"    }\n"
"\n"
"    vec4 positionV4 = vec4(i_position, 1.0);\n"
"    gl_Position = u_projection * u_modelView * positionV4;\n"
"    m_texCoord = i_uv;\n"
"	m_normal = normalize(mat3(u_modelView) * i_normal);\n"
"	m_fragPos = vec3(u_modelView * positionV4);\n"
"}\n"
"\n"
;
//////////////////////////////////////////////////
// draw_single_mesh_frag.glsl
//////////////////////////////////////////////////
static const char* draw_single_mesh_frag_text =
"#version 330\n"
"\n"
"uniform vec4 u_colour;\n"
"uniform sampler2D u_diffuseTex;\n"
"\n"
"in vec2 m_texCoord;\n"
"in vec3 m_normal;\n"
"in vec3 m_fragPos;\n"
"\n"
"out vec4 outputColor;\n"
"\n"
"void main()\n"
"{\n"
"#if 0\n"
"   outputColor = vec4(1, 1, 1, 1);\n"
"#endif\n"
"#if 1\n"
"   outputColor = vec4(m_texCoord.x, m_texCoord.y, 1, 1);\n"
"#endif\n"
"#if 0\n"
"   outputColor = u_colour;\n"
"#endif\n"
"#if 0 // Output depth\n"
"   float depthValue = gl_FragCoord.z;\n"
"   outputColor = vec4(u_colour.x * depthValue, u_colour.y * depthValue, u_colour.z * depthValue, 1);\n"
"#endif\n"
"#if 1 // output texture\n"
"   vec4 diffuse = texture2D(u_diffuseTex, m_texCoord);\n"
"   outputColor = diffuse;\n"
"#endif\n"
"#if 0 // output texture with boolean transparency\n"
"   vec4 diffuse = texture2D(u_diffuseTex, m_texCoord);\n"
"   if (diffuse.w < 0.5) { discard; }\n"
"   outputColor = diffuse;\n"
"#endif\n"
"}\n"
;
//////////////////////////////////////////////////
// draw_single_mesh_vert.glsl
//////////////////////////////////////////////////
static const char* draw_single_mesh_vert_text =
"#version 330\n"
"\n"
"uniform mat4 u_projection;\n"
"uniform mat4 u_modelView;\n"
"// Vertex Attrib 0\n"
"layout (location = 0) in vec3 i_position;\n"
"// // Vertex Attrib 1\n"
"layout (location = 1) in vec2 i_uv;\n"
"// // Vertex Attrib 2\n"
"layout (location = 2) in vec3 i_normal;\n"
"\n"
"out vec2 m_texCoord;\n"
"out vec3 m_normal;\n"
"out vec3 m_fragPos;\n"
"\n"
"void main()\n"
"{\n"
"   vec4 positionV4 = vec4(i_position, 1.0);\n"
"   gl_Position = u_projection * u_modelView * positionV4;\n"
"   m_texCoord = i_uv;\n"
"	m_normal = normalize(mat3(u_modelView) * i_normal);\n"
"	m_fragPos = vec3(u_modelView * positionV4);\n"
"}\n"
"\n"
;
//////////////////////////////////////////////////
// draw_sprite_batch_2_vert.glsl
//////////////////////////////////////////////////
static const char* draw_sprite_batch_2_vert_text =
"#version 330\n"
"\n"
"uniform mat4 u_projection;\n"
"uniform mat4 u_view;\n"
"// uniform int u_instanceCount;\n"
"uniform sampler2D u_dataTexture;\n"
"uniform int u_dataStride;\n"
"uniform int u_dataTexSize;\n"
"\n"
"layout (location = 0) in vec3 i_position;\n"
"layout (location = 1) in vec2 i_uv;\n"
"layout (location = 2) in vec3 i_normal;\n"
"\n"
"out vec2 m_texCoord;\n"
"out vec3 m_normal;\n"
"out vec3 m_fragPos;\n"
"// flat - no interpolation\n"
"flat out int m_instanceID;\n"
"flat out vec4 m_colour;\n"
"\n"
"ivec2 DataIndexToPixel(int index, int imageWidth)\n"
"{\n"
"	return ivec2(index % imageWidth, int(index / imageWidth));\n"
"}\n"
"\n"
"vec4 ReadDataPixel(int dataItemNumber)\n"
"{\n"
"    int root = u_dataStride * m_instanceID;\n"
"    ivec2 pixel = DataIndexToPixel(root + dataItemNumber, u_dataTexSize);\n"
"    return texelFetch(u_dataTexture, pixel, 0);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    // pass instance to frag shader\n"
"    m_instanceID = gl_InstanceID;\n"
"\n"
"    // read instance data\n"
"    vec4 data1 = ReadDataPixel(0);\n"
"    vec4 data2 = ReadDataPixel(1);\n"
"    \n"
"    // mat4 u_modelView = u_projection;\n"
"\n"
"    mat4 u_model;\n"
"    \n"
"    u_model[0][0] = 0.1; // scale x\n"
"    u_model[0][1] = 0;\n"
"    u_model[0][2] = 0;\n"
"    u_model[0][3] = 0;\n"
"\n"
"    u_model[1][0] = 0;\n"
"    u_model[1][1] = 0.1; // scale y\n"
"    u_model[1][3] = 0;\n"
"    u_model[1][2] = 0;\n"
"\n"
"    u_model[2][0] = 0;\n"
"    u_model[2][1] = 0;\n"
"    u_model[2][2] = 0.1; // scale z\n"
"    u_model[2][3] = 0;\n"
"    \n"
"    u_model[3][0] = data1.x; // pos x\n"
"    u_model[3][1] = data1.y; // pos y\n"
"    u_model[3][2] = data1.z; // pos z\n"
"    u_model[3][3] = 1;      // pos w\n"
"\n"
"    \n"
"    mat4 u_modelView = u_view * u_model;\n"
"    // u_modelView[0][0] *= 0.02f;\n"
"    // u_modelView[1][1] *= 0.02f;\n"
"    // u_modelView[2][2] *= 0.02f;\n"
"\n"
"    // // pos\n"
"    // u_modelView[3][0] = data1.x;\n"
"    // u_modelView[3][1] = data1.y;\n"
"    // u_modelView[3][2] = data1.z;\n"
"    // u_modelView[3][3] = 1;\n"
"    \n"
"    vec4 positionV4 = vec4(i_position, 1.0);\n"
"    // gl_Position = u_projection * u_modelView * positionV4;\n"
"    // gl_Position = u_projection * u_model * positionV4;\n"
"    // gl_Position = u_projection * u_model * u_view * positionV4;\n"
"    gl_Position = u_projection * u_view * u_model * positionV4;\n"
"    // m_texCoord = i_uv;\n"
"    // m_texCoord = vec2(0.25, 0.25);\n"
"    m_texCoord.x = data2.x + ((data2.z - data2.x) * i_uv.x);\n"
"    m_texCoord.y = data2.y + ((data2.w - data2.y) * i_uv.y);\n"
"	m_normal = normalize(mat3(u_modelView) * i_normal);\n"
"	m_fragPos = vec3(u_modelView * positionV4);\n"
"}\n"
"\n"
;
//////////////////////////////////////////////////
// draw_sprite_batch_frag.glsl
//////////////////////////////////////////////////
static const char* draw_sprite_batch_frag_text =
"#version 330\n"
"\n"
"uniform sampler2D u_diffuseTex;\n"
"uniform sampler2D u_dataTexture;\n"
"uniform int u_instanceCount;\n"
"\n"
"in vec2 m_texCoord;\n"
"in vec3 m_normal;\n"
"in vec3 m_fragPos;\n"
"\n"
"// flat - no interpolation\n"
"flat in int m_instanceID;\n"
"flat in vec4 m_colour;\n"
"\n"
"out vec4 outputColor;\n"
"\n"
"void main()\n"
"{\n"
"    #if 1\n"
"    vec4 diffuse = texture2D(u_diffuseTex, m_texCoord);\n"
"    outputColor = diffuse;\n"
"    #endif\n"
"\n"
"    #if 0\n"
"    vec4 diffuse = texture2D(u_diffuseTex, m_texCoord);\n"
"    float r = float(m_instanceID) / float(u_instanceCount);\n"
"    float g = 1.0 - float(m_instanceID) / float(u_instanceCount);\n"
"    outputColor = vec4(diffuse.x * r, diffuse.y * g, diffuse.b, 1);\n"
"    #endif\n"
"    \n"
"    #if 0\n"
"    // vec4 block = vec4(1, 1, 1, 1);\n"
"    // vec4 data1 = texelFetch(u_dataTexture, ivec2(m_instanceID, 0);\n"
"\n"
"    // vec4 diffuse = vec4(texelFetch(u_dataTexture, ivec2(m_instanceID, 0), 0));\n"
"    // vec4 diffuse = vec4(texelFetch(u_dataTexture, ivec2(0, 0), 0));\n"
"    // outputColor = (block * 0.5) + (m_colour * 0.5);\n"
"    outputColor = m_colour;\n"
"    #endif\n"
"}\n"
"\n"
;
//////////////////////////////////////////////////
// draw_sprite_batch_vert.glsl
//////////////////////////////////////////////////
static const char* draw_sprite_batch_vert_text =
"#version 330\n"
"\n"
"uniform mat4 u_projection;\n"
"uniform mat4 u_view;\n"
"// uniform int u_instanceCount;\n"
"uniform sampler2D u_dataTexture;\n"
"uniform int u_dataStride;\n"
"uniform int u_dataTexSize;\n"
"\n"
"layout (location = 0) in vec3 i_position;\n"
"layout (location = 1) in vec2 i_uv;\n"
"layout (location = 2) in vec3 i_normal;\n"
"\n"
"out vec2 m_texCoord;\n"
"out vec3 m_normal;\n"
"out vec3 m_fragPos;\n"
"// flat - no interpolation\n"
"flat out int m_instanceID;\n"
"flat out vec4 m_colour;\n"
"\n"
"ivec2 DataIndexToPixel(int index, int imageWidth)\n"
"{\n"
"	return ivec2(index % imageWidth, int(index / imageWidth));\n"
"}\n"
"\n"
"vec4 ReadDataPixel(int dataItemNumber)\n"
"{\n"
"    int root = u_dataStride * m_instanceID;\n"
"    ivec2 pixel = DataIndexToPixel(root + dataItemNumber, u_dataTexSize);\n"
"    return texelFetch(u_dataTexture, pixel, 0);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    // pass instance to frag shader\n"
"    m_instanceID = gl_InstanceID;\n"
"\n"
"    // read instance data\n"
"    vec4 data1 = ReadDataPixel(0);\n"
"    vec4 data2 = ReadDataPixel(1);\n"
"    \n"
"    mat4 u_modelView = u_projection;\n"
"\n"
"    mat4 u_model;\n"
"    \n"
"    u_model[0][0] = 0.1; // scale x\n"
"    u_model[0][1] = 0;\n"
"    u_model[0][2] = 0;\n"
"    u_model[0][3] = 0;\n"
"\n"
"    u_model[1][0] = 0;\n"
"    u_model[1][1] = 0.1; // scale y\n"
"    u_model[1][3] = 0;\n"
"    u_model[1][2] = 0;\n"
"\n"
"    u_model[2][0] = 0;\n"
"    u_model[2][1] = 0;\n"
"    u_model[2][2] = 0.1; // scale z\n"
"    u_model[2][3] = 0;\n"
"    \n"
"    u_model[3][0] = data1.x; // pos x\n"
"    u_model[3][1] = data1.y; // pos y\n"
"    u_model[3][2] = data1.z; // pos z\n"
"    u_model[3][3] = 1;      // pos w\n"
"\n"
"    \n"
"    \n"
"    u_modelView[0][0] *= 0.02f;\n"
"    u_modelView[1][1] *= 0.02f;\n"
"    u_modelView[2][2] *= 0.02f;\n"
"\n"
"    // pos\n"
"    u_modelView[3][0] = data1.x;\n"
"    u_modelView[3][1] = data1.y;\n"
"    u_modelView[3][2] = data1.z;\n"
"    u_modelView[3][3] = 1;\n"
"    \n"
"    vec4 positionV4 = vec4(i_position, 1.0);\n"
"    // gl_Position = u_projection * u_modelView * positionV4;\n"
"    gl_Position = u_projection * u_model * u_view * positionV4;\n"
"    // m_texCoord = i_uv;\n"
"    // m_texCoord = vec2(0.25, 0.25);\n"
"    m_texCoord.x = data2.x + ((data2.z - data2.x) * i_uv.x);\n"
"    m_texCoord.y = data2.y + ((data2.w - data2.y) * i_uv.y);\n"
"	m_normal = normalize(mat3(u_modelView) * i_normal);\n"
"	m_fragPos = vec3(u_modelView * positionV4);\n"
"}\n"
"\n"
;

#endif // SHADERS_H
