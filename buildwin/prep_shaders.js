/*
Embeds opengl shaders
Read glsl files from source directory and write them as
multiline strings into the output .h file
*/
'use strict';

// first args will be path to 'node' and path to this file so discard
const args = process.argv.slice(2, process.argv.length);
if (args.length !== 2) {
	console.log(`Require 2 args: source directory of glsl files and destination file path`);
	console.log(`eg node prep_shaders ../engine/src/opengl/shaders/ ../engine/src/opengl/shaders/zrgl_embedded_shaders.h`);
	console.log(`Args were: ${args}`);
	return;
}

// these aren't const but treat them as such!
let HEADER_GUARD = args[1].split('/').pop().toUpperCase().replace('.', '_');
if (HEADER_GUARD.length === 0) {
	console.error(`ERROR: Failed to strip header guard name from target path`);
	return;
}

let SOURCE_DIR = args[0];
let OUTPUT_DIR = args[1];

const fs = require("fs");
const path = require("path");
let files = fs.readdirSync(SOURCE_DIR);
files = files.filter(file => (path.extname(file) === ".glsl"));
let numFiles = files.length;
console.log(`--- Writing ${numFiles} shader files to ${OUTPUT_DIR}---`);

let shaders = [];
files.forEach(file => {
	let text = fs.readFileSync(`${SOURCE_DIR}${file}`, "utf-8");
	shaders.push(text);
});

let header = 
`#ifndef ${HEADER_GUARD}
#define ${HEADER_GUARD}
/* This file is automatically generated */
`;

let footer =
`
#endif // ${HEADER_GUARD}
`;

let output = header;

shaders.forEach((shader, i)  => {
	output += `//////////////////////////////////////////////////\r\n`;
	output += `// ${files[i]}\r\n`;
	output += `//////////////////////////////////////////////////\r\n`;
	let name = files[i].replace(/\.[^/.]+$/, "");
	output += `static const char* ${name}_text =\r\n`;
	let lines = shader.split("\r\n");
	lines.forEach(line => output += `"${line}\\n"\n`);
	output += ";\r\n";
});
output += footer;

fs.writeFileSync(OUTPUT_DIR, output);
console.log("Done");
